1。动态字符串SDS


 string  '1' 's'  'd'  '\0' 基本都是\0结束
为什么 没有直接用C的字符串
原因1.~ sds 可以直接获取字符串长度 0(1)  而C语言 需要遍历0(n) 浪费性能
2、可以防止缓存区溢出。因为当C 执行strcat 将两个字符串连接，由于没有对字符串A|B 做长度判断，会导致A 可能写的长度破坏其他元素的存储、 而sdscat 重写后 会先判断空间是够足够，不足够，将会分配在执行连接
3.对字符串修改。C 每次都会重新分配内存、 而sds 用过free 实现空间预分配和惰性空间释放两种优化策略
4.sds api访问安全。是因为存储以二进制形式存储，不会造成溢出
5.sds 可以保存文本和二进制 、而C 字符串只能保存文本

append 操作方式
额外分配的free 未使用空间数量 公式
    1. 如果sds.length < 1MB free 将和len 一样 就是 N + N + 1 byte结尾符号
    2. 如果 >1MB 分配   N+ 1MB + 1byte   这就是实际长度
缩短字符串操作
惰性空间释放
1.如果缩短。只会将free 增加 而不进行内存重分配

而且 sds 提供API 可以让我妈真正释放sds的未使用空间，不用担心这个策略 造成内存浪费

2.链表   < list ,发布订阅 慢查询 监视器> <redis服务器用链表保存多个客户端状态信息><用链表来构建客户端输出缓冲区>

链表 由  头尾节点(listNode 由 前后节点 + 节点value 组成) | 长度 复制 释放 对比函数 组成

每个链表节点都由 listNode 结构组成  -redis 链表是双端链表
每个链表 用list 结构表示。包含 表头，表尾 节点指针 + 链表长度 复制 释放 对比函数 组成

因为链表表头前置节点和 表尾节点的后置节点都是NULL 所以redis 链表是无环链表
